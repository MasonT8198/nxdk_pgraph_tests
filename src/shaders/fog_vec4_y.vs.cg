struct vIn {
  float3 pos : POSITION;
  float4 diffuse : COLOR0;
};

struct vOut {
  float4 pos : POSITION;
  float4 col0 : COLOR0;
  float4 col1 : COLOR1;
  // cg expects this to be a single value, but will generate the correct code to manipulate a vector anyway.
  // Certain games (e.g., NFS Underground) treat oFog as a vec4, and that behavior is tested here.
  float4 fog : FOG;
};

vOut main(vIn I, uniform float4x4 model_matrix, uniform float4x4 view_matrix, uniform float4x4 projection_matrix,
          uniform float4 fog_values, uniform float4 clamp_values, uniform float y_value_hack) {
  vOut result;

  // Transform position and normal
  float4 pos = mul(float4(I.pos.xyz, 1.0), model_matrix);

  // Transform pos to screen space
  pos = mul(pos, view_matrix);
  pos = mul(pos, projection_matrix);
  pos.xyz = pos.xyz / pos.w;

  result.pos = pos;
  result.col0 = I.diffuse;

  // Note: Compiler warnings about unused components are expected, this is intentionally part of the test.
  // Force all the correct components of fog_values to be referenced via `clamp`. Failure to do this results in
  // Cg generating code that copies the entire vector, causing values to be set erroneously.

  // Unfortunately in the Y case, the clamp generates
  //   MAX(oFog,y, R0.x, c[109]);
  // which ends up using c[109].x instead of c[109].y (c[109] = [1.0, 0.0, ...]) forcing y to always be 1.0.
  // To work around this, the y_value is passed in through an additional uniform.
  // Unfortunately we still need to use fog_values so it keeps its place in the transform constants, so it is assigned
  // to specular output.
  result.col1.r = clamp(fog_values.y, clamp_values.x, clamp_values.y);
  result.fog.y = y_value_hack;

  return result;
}
